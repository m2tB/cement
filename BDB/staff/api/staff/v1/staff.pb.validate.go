// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: staff/v1/staff.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateStaffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStaffRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStaffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStaffRequestMultiError, or nil if none found.
func (m *CreateStaffRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStaffRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CreateStaffRequest_Mobile_Pattern.MatchString(m.GetMobile()) {
		err := CreateStaffRequestValidationError{
			field:  "Mobile",
			reason: "value does not match regex pattern \"^0?(13|14|15|17|18|19)[0-9]{9}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 4 {
		err := CreateStaffRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 4 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateStaffRequestMultiError(errors)
	}

	return nil
}

// CreateStaffRequestMultiError is an error wrapping multiple validation errors
// returned by CreateStaffRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateStaffRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStaffRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStaffRequestMultiError) AllErrors() []error { return m }

// CreateStaffRequestValidationError is the validation error returned by
// CreateStaffRequest.Validate if the designated constraints aren't met.
type CreateStaffRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStaffRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStaffRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStaffRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStaffRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStaffRequestValidationError) ErrorName() string {
	return "CreateStaffRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStaffRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStaffRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStaffRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStaffRequestValidationError{}

var _CreateStaffRequest_Mobile_Pattern = regexp.MustCompile("^0?(13|14|15|17|18|19)[0-9]{9}$")

// Validate checks the field values on CreateStaffReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateStaffReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStaffReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStaffReplyMultiError, or nil if none found.
func (m *CreateStaffReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStaffReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exec

	if len(errors) > 0 {
		return CreateStaffReplyMultiError(errors)
	}

	return nil
}

// CreateStaffReplyMultiError is an error wrapping multiple validation errors
// returned by CreateStaffReply.ValidateAll() if the designated constraints
// aren't met.
type CreateStaffReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStaffReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStaffReplyMultiError) AllErrors() []error { return m }

// CreateStaffReplyValidationError is the validation error returned by
// CreateStaffReply.Validate if the designated constraints aren't met.
type CreateStaffReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStaffReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStaffReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStaffReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStaffReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStaffReplyValidationError) ErrorName() string { return "CreateStaffReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateStaffReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStaffReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStaffReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStaffReplyValidationError{}

// Validate checks the field values on UpdateStaffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStaffRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStaffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStaffRequestMultiError, or nil if none found.
func (m *UpdateStaffRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStaffRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateStaffRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateStaffRequest_Mobile_Pattern.MatchString(m.GetMobile()) {
		err := UpdateStaffRequestValidationError{
			field:  "Mobile",
			reason: "value does not match regex pattern \"^0?(13|14|15|17|18|19)[0-9]{9}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 4 {
		err := UpdateStaffRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 4 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateStaffRequestMultiError(errors)
	}

	return nil
}

// UpdateStaffRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateStaffRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateStaffRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStaffRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStaffRequestMultiError) AllErrors() []error { return m }

// UpdateStaffRequestValidationError is the validation error returned by
// UpdateStaffRequest.Validate if the designated constraints aren't met.
type UpdateStaffRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStaffRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStaffRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStaffRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStaffRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStaffRequestValidationError) ErrorName() string {
	return "UpdateStaffRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStaffRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStaffRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStaffRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStaffRequestValidationError{}

var _UpdateStaffRequest_Mobile_Pattern = regexp.MustCompile("^0?(13|14|15|17|18|19)[0-9]{9}$")

// Validate checks the field values on UpdateStaffReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateStaffReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStaffReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStaffReplyMultiError, or nil if none found.
func (m *UpdateStaffReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStaffReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exec

	if len(errors) > 0 {
		return UpdateStaffReplyMultiError(errors)
	}

	return nil
}

// UpdateStaffReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateStaffReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateStaffReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStaffReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStaffReplyMultiError) AllErrors() []error { return m }

// UpdateStaffReplyValidationError is the validation error returned by
// UpdateStaffReply.Validate if the designated constraints aren't met.
type UpdateStaffReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStaffReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStaffReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStaffReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStaffReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStaffReplyValidationError) ErrorName() string { return "UpdateStaffReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateStaffReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStaffReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStaffReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStaffReplyValidationError{}

// Validate checks the field values on DeleteStaffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStaffRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStaffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStaffRequestMultiError, or nil if none found.
func (m *DeleteStaffRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStaffRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteStaffRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteStaffRequestMultiError(errors)
	}

	return nil
}

// DeleteStaffRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteStaffRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteStaffRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStaffRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStaffRequestMultiError) AllErrors() []error { return m }

// DeleteStaffRequestValidationError is the validation error returned by
// DeleteStaffRequest.Validate if the designated constraints aren't met.
type DeleteStaffRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStaffRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStaffRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStaffRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStaffRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStaffRequestValidationError) ErrorName() string {
	return "DeleteStaffRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStaffRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStaffRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStaffRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStaffRequestValidationError{}

// Validate checks the field values on DeleteStaffReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteStaffReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStaffReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStaffReplyMultiError, or nil if none found.
func (m *DeleteStaffReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStaffReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exec

	if len(errors) > 0 {
		return DeleteStaffReplyMultiError(errors)
	}

	return nil
}

// DeleteStaffReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteStaffReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteStaffReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStaffReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStaffReplyMultiError) AllErrors() []error { return m }

// DeleteStaffReplyValidationError is the validation error returned by
// DeleteStaffReply.Validate if the designated constraints aren't met.
type DeleteStaffReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStaffReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStaffReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStaffReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStaffReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStaffReplyValidationError) ErrorName() string { return "DeleteStaffReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteStaffReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStaffReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStaffReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStaffReplyValidationError{}

// Validate checks the field values on RecoveryStaffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecoveryStaffRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecoveryStaffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecoveryStaffRequestMultiError, or nil if none found.
func (m *RecoveryStaffRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RecoveryStaffRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := RecoveryStaffRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RecoveryStaffRequestMultiError(errors)
	}

	return nil
}

// RecoveryStaffRequestMultiError is an error wrapping multiple validation
// errors returned by RecoveryStaffRequest.ValidateAll() if the designated
// constraints aren't met.
type RecoveryStaffRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecoveryStaffRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecoveryStaffRequestMultiError) AllErrors() []error { return m }

// RecoveryStaffRequestValidationError is the validation error returned by
// RecoveryStaffRequest.Validate if the designated constraints aren't met.
type RecoveryStaffRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecoveryStaffRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecoveryStaffRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecoveryStaffRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecoveryStaffRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecoveryStaffRequestValidationError) ErrorName() string {
	return "RecoveryStaffRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RecoveryStaffRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecoveryStaffRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecoveryStaffRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecoveryStaffRequestValidationError{}

// Validate checks the field values on RecoveryStaffReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecoveryStaffReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecoveryStaffReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecoveryStaffReplyMultiError, or nil if none found.
func (m *RecoveryStaffReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RecoveryStaffReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exec

	if len(errors) > 0 {
		return RecoveryStaffReplyMultiError(errors)
	}

	return nil
}

// RecoveryStaffReplyMultiError is an error wrapping multiple validation errors
// returned by RecoveryStaffReply.ValidateAll() if the designated constraints
// aren't met.
type RecoveryStaffReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecoveryStaffReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecoveryStaffReplyMultiError) AllErrors() []error { return m }

// RecoveryStaffReplyValidationError is the validation error returned by
// RecoveryStaffReply.Validate if the designated constraints aren't met.
type RecoveryStaffReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecoveryStaffReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecoveryStaffReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecoveryStaffReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecoveryStaffReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecoveryStaffReplyValidationError) ErrorName() string {
	return "RecoveryStaffReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RecoveryStaffReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecoveryStaffReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecoveryStaffReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecoveryStaffReplyValidationError{}

// Validate checks the field values on ListStaffRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListStaffRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStaffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStaffRequestMultiError, or nil if none found.
func (m *ListStaffRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStaffRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pn

	// no validation rules for PSize

	// no validation rules for Mobile

	// no validation rules for Name

	// no validation rules for IsDeleted

	if len(errors) > 0 {
		return ListStaffRequestMultiError(errors)
	}

	return nil
}

// ListStaffRequestMultiError is an error wrapping multiple validation errors
// returned by ListStaffRequest.ValidateAll() if the designated constraints
// aren't met.
type ListStaffRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStaffRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStaffRequestMultiError) AllErrors() []error { return m }

// ListStaffRequestValidationError is the validation error returned by
// ListStaffRequest.Validate if the designated constraints aren't met.
type ListStaffRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStaffRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStaffRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStaffRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStaffRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStaffRequestValidationError) ErrorName() string { return "ListStaffRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListStaffRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStaffRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStaffRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStaffRequestValidationError{}

// Validate checks the field values on ListStaffReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListStaffReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStaffReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListStaffReplyMultiError,
// or nil if none found.
func (m *ListStaffReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStaffReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListStaffReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListStaffReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStaffReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListStaffReplyMultiError(errors)
	}

	return nil
}

// ListStaffReplyMultiError is an error wrapping multiple validation errors
// returned by ListStaffReply.ValidateAll() if the designated constraints
// aren't met.
type ListStaffReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStaffReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStaffReplyMultiError) AllErrors() []error { return m }

// ListStaffReplyValidationError is the validation error returned by
// ListStaffReply.Validate if the designated constraints aren't met.
type ListStaffReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStaffReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStaffReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStaffReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStaffReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStaffReplyValidationError) ErrorName() string { return "ListStaffReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListStaffReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStaffReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStaffReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStaffReplyValidationError{}

// Validate checks the field values on StaffReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StaffReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StaffReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StaffReplyMultiError, or
// nil if none found.
func (m *StaffReply) ValidateAll() error {
	return m.validate(true)
}

func (m *StaffReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Mobile

	// no validation rules for Name

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return StaffReplyMultiError(errors)
	}

	return nil
}

// StaffReplyMultiError is an error wrapping multiple validation errors
// returned by StaffReply.ValidateAll() if the designated constraints aren't met.
type StaffReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StaffReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StaffReplyMultiError) AllErrors() []error { return m }

// StaffReplyValidationError is the validation error returned by
// StaffReply.Validate if the designated constraints aren't met.
type StaffReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StaffReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StaffReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StaffReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StaffReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StaffReplyValidationError) ErrorName() string { return "StaffReplyValidationError" }

// Error satisfies the builtin error interface
func (e StaffReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStaffReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StaffReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StaffReplyValidationError{}
