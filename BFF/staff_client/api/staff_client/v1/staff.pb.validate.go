// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: staff_client/v1/staff.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CaptchaRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CaptchaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CaptchaRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CaptchaRequestMultiError,
// or nil if none found.
func (m *CaptchaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CaptchaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CaptchaRequest_Mobile_Pattern.MatchString(m.GetMobile()) {
		err := CaptchaRequestValidationError{
			field:  "Mobile",
			reason: "value does not match regex pattern \"^0?(13|14|15|17|18|19)[0-9]{9}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CaptchaRequestMultiError(errors)
	}

	return nil
}

// CaptchaRequestMultiError is an error wrapping multiple validation errors
// returned by CaptchaRequest.ValidateAll() if the designated constraints
// aren't met.
type CaptchaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CaptchaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CaptchaRequestMultiError) AllErrors() []error { return m }

// CaptchaRequestValidationError is the validation error returned by
// CaptchaRequest.Validate if the designated constraints aren't met.
type CaptchaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CaptchaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CaptchaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CaptchaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CaptchaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CaptchaRequestValidationError) ErrorName() string { return "CaptchaRequestValidationError" }

// Error satisfies the builtin error interface
func (e CaptchaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCaptchaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CaptchaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CaptchaRequestValidationError{}

var _CaptchaRequest_Mobile_Pattern = regexp.MustCompile("^0?(13|14|15|17|18|19)[0-9]{9}$")

// Validate checks the field values on CaptchaReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CaptchaReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CaptchaReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CaptchaReplyMultiError, or
// nil if none found.
func (m *CaptchaReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CaptchaReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exec

	if len(errors) > 0 {
		return CaptchaReplyMultiError(errors)
	}

	return nil
}

// CaptchaReplyMultiError is an error wrapping multiple validation errors
// returned by CaptchaReply.ValidateAll() if the designated constraints aren't met.
type CaptchaReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CaptchaReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CaptchaReplyMultiError) AllErrors() []error { return m }

// CaptchaReplyValidationError is the validation error returned by
// CaptchaReply.Validate if the designated constraints aren't met.
type CaptchaReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CaptchaReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CaptchaReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CaptchaReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CaptchaReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CaptchaReplyValidationError) ErrorName() string { return "CaptchaReplyValidationError" }

// Error satisfies the builtin error interface
func (e CaptchaReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCaptchaReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CaptchaReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CaptchaReplyValidationError{}

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequestMultiError, or nil if none found.
func (m *RegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_RegisterRequest_Mobile_Pattern.MatchString(m.GetMobile()) {
		err := RegisterRequestValidationError{
			field:  "Mobile",
			reason: "value does not match regex pattern \"^0?(13|14|15|17|18|19)[0-9]{9}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 6 {
		err := RegisterRequestValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 6 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterRequestMultiError(errors)
	}

	return nil
}

// RegisterRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequestMultiError) AllErrors() []error { return m }

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

var _RegisterRequest_Mobile_Pattern = regexp.MustCompile("^0?(13|14|15|17|18|19)[0-9]{9}$")

// Validate checks the field values on RegisterReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RegisterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RegisterReplyMultiError, or
// nil if none found.
func (m *RegisterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exec

	if len(errors) > 0 {
		return RegisterReplyMultiError(errors)
	}

	return nil
}

// RegisterReplyMultiError is an error wrapping multiple validation errors
// returned by RegisterReply.ValidateAll() if the designated constraints
// aren't met.
type RegisterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterReplyMultiError) AllErrors() []error { return m }

// RegisterReplyValidationError is the validation error returned by
// RegisterReply.Validate if the designated constraints aren't met.
type RegisterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterReplyValidationError) ErrorName() string { return "RegisterReplyValidationError" }

// Error satisfies the builtin error interface
func (e RegisterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterReplyValidationError{}

// Validate checks the field values on SignInRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignInRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignInRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignInRequestMultiError, or
// nil if none found.
func (m *SignInRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SignInRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_SignInRequest_Mobile_Pattern.MatchString(m.GetMobile()) {
		err := SignInRequestValidationError{
			field:  "Mobile",
			reason: "value does not match regex pattern \"^0?(13|14|15|17|18|19)[0-9]{9}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptcha()) != 6 {
		err := SignInRequestValidationError{
			field:  "Captcha",
			reason: "value length must be 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return SignInRequestMultiError(errors)
	}

	return nil
}

// SignInRequestMultiError is an error wrapping multiple validation errors
// returned by SignInRequest.ValidateAll() if the designated constraints
// aren't met.
type SignInRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignInRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignInRequestMultiError) AllErrors() []error { return m }

// SignInRequestValidationError is the validation error returned by
// SignInRequest.Validate if the designated constraints aren't met.
type SignInRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignInRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignInRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignInRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignInRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignInRequestValidationError) ErrorName() string { return "SignInRequestValidationError" }

// Error satisfies the builtin error interface
func (e SignInRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignInRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignInRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignInRequestValidationError{}

var _SignInRequest_Mobile_Pattern = regexp.MustCompile("^0?(13|14|15|17|18|19)[0-9]{9}$")

// Validate checks the field values on SignInReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignInReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignInReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignInReplyMultiError, or
// nil if none found.
func (m *SignInReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SignInReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Mobile

	// no validation rules for Name

	// no validation rules for CreatedAt

	// no validation rules for Token

	if len(errors) > 0 {
		return SignInReplyMultiError(errors)
	}

	return nil
}

// SignInReplyMultiError is an error wrapping multiple validation errors
// returned by SignInReply.ValidateAll() if the designated constraints aren't met.
type SignInReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignInReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignInReplyMultiError) AllErrors() []error { return m }

// SignInReplyValidationError is the validation error returned by
// SignInReply.Validate if the designated constraints aren't met.
type SignInReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignInReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignInReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignInReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignInReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignInReplyValidationError) ErrorName() string { return "SignInReplyValidationError" }

// Error satisfies the builtin error interface
func (e SignInReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignInReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignInReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignInReplyValidationError{}

// Validate checks the field values on SignOutReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignOutReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignOutReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignOutReplyMultiError, or
// nil if none found.
func (m *SignOutReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SignOutReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exec

	if len(errors) > 0 {
		return SignOutReplyMultiError(errors)
	}

	return nil
}

// SignOutReplyMultiError is an error wrapping multiple validation errors
// returned by SignOutReply.ValidateAll() if the designated constraints aren't met.
type SignOutReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignOutReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignOutReplyMultiError) AllErrors() []error { return m }

// SignOutReplyValidationError is the validation error returned by
// SignOutReply.Validate if the designated constraints aren't met.
type SignOutReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignOutReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignOutReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignOutReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignOutReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignOutReplyValidationError) ErrorName() string { return "SignOutReplyValidationError" }

// Error satisfies the builtin error interface
func (e SignOutReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignOutReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignOutReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignOutReplyValidationError{}

// Validate checks the field values on ReadStaffRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReadStaffRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadStaffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadStaffRequestMultiError, or nil if none found.
func (m *ReadStaffRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadStaffRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := ReadStaffRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReadStaffRequestMultiError(errors)
	}

	return nil
}

// ReadStaffRequestMultiError is an error wrapping multiple validation errors
// returned by ReadStaffRequest.ValidateAll() if the designated constraints
// aren't met.
type ReadStaffRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadStaffRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadStaffRequestMultiError) AllErrors() []error { return m }

// ReadStaffRequestValidationError is the validation error returned by
// ReadStaffRequest.Validate if the designated constraints aren't met.
type ReadStaffRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadStaffRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadStaffRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadStaffRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadStaffRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadStaffRequestValidationError) ErrorName() string { return "ReadStaffRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReadStaffRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadStaffRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadStaffRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadStaffRequestValidationError{}

// Validate checks the field values on ReadStaffReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReadStaffReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadStaffReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReadStaffReplyMultiError,
// or nil if none found.
func (m *ReadStaffReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadStaffReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Mobile

	// no validation rules for Name

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ReadStaffReplyMultiError(errors)
	}

	return nil
}

// ReadStaffReplyMultiError is an error wrapping multiple validation errors
// returned by ReadStaffReply.ValidateAll() if the designated constraints
// aren't met.
type ReadStaffReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadStaffReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadStaffReplyMultiError) AllErrors() []error { return m }

// ReadStaffReplyValidationError is the validation error returned by
// ReadStaffReply.Validate if the designated constraints aren't met.
type ReadStaffReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadStaffReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadStaffReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadStaffReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadStaffReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadStaffReplyValidationError) ErrorName() string { return "ReadStaffReplyValidationError" }

// Error satisfies the builtin error interface
func (e ReadStaffReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadStaffReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadStaffReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadStaffReplyValidationError{}

// Validate checks the field values on UpdateStaffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStaffRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStaffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStaffRequestMultiError, or nil if none found.
func (m *UpdateStaffRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStaffRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateStaffRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetName() != "" {

		if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 6 {
			err := UpdateStaffRequestValidationError{
				field:  "Name",
				reason: "value length must be between 2 and 6 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateStaffRequestMultiError(errors)
	}

	return nil
}

// UpdateStaffRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateStaffRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateStaffRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStaffRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStaffRequestMultiError) AllErrors() []error { return m }

// UpdateStaffRequestValidationError is the validation error returned by
// UpdateStaffRequest.Validate if the designated constraints aren't met.
type UpdateStaffRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStaffRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStaffRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStaffRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStaffRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStaffRequestValidationError) ErrorName() string {
	return "UpdateStaffRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStaffRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStaffRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStaffRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStaffRequestValidationError{}

// Validate checks the field values on UpdateStaffReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateStaffReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStaffReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStaffReplyMultiError, or nil if none found.
func (m *UpdateStaffReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStaffReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exec

	if len(errors) > 0 {
		return UpdateStaffReplyMultiError(errors)
	}

	return nil
}

// UpdateStaffReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateStaffReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateStaffReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStaffReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStaffReplyMultiError) AllErrors() []error { return m }

// UpdateStaffReplyValidationError is the validation error returned by
// UpdateStaffReply.Validate if the designated constraints aren't met.
type UpdateStaffReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStaffReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStaffReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStaffReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStaffReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStaffReplyValidationError) ErrorName() string { return "UpdateStaffReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateStaffReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStaffReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStaffReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStaffReplyValidationError{}
