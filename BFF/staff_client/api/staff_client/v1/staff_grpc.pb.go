// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: staff_client/v1/staff.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StaffClientClient is the client API for StaffClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StaffClientClient interface {
	// ----------------------------------------------staff登录相关接口-----------------------------------------------------
	Captcha(ctx context.Context, in *CaptchaRequest, opts ...grpc.CallOption) (*CaptchaReply, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInReply, error)
	SignOut(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SignOutReply, error)
	// ----------------------------------------------staff数据相关接口-----------------------------------------------------
	ReadStaff(ctx context.Context, in *ReadStaffRequest, opts ...grpc.CallOption) (*ReadStaffReply, error)
	UpdateStaff(ctx context.Context, in *UpdateStaffRequest, opts ...grpc.CallOption) (*UpdateStaffReply, error)
}

type staffClientClient struct {
	cc grpc.ClientConnInterface
}

func NewStaffClientClient(cc grpc.ClientConnInterface) StaffClientClient {
	return &staffClientClient{cc}
}

func (c *staffClientClient) Captcha(ctx context.Context, in *CaptchaRequest, opts ...grpc.CallOption) (*CaptchaReply, error) {
	out := new(CaptchaReply)
	err := c.cc.Invoke(ctx, "/api.staff_client.v1.StaffClient/Captcha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffClientClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/api.staff_client.v1.StaffClient/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffClientClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInReply, error) {
	out := new(SignInReply)
	err := c.cc.Invoke(ctx, "/api.staff_client.v1.StaffClient/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffClientClient) SignOut(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SignOutReply, error) {
	out := new(SignOutReply)
	err := c.cc.Invoke(ctx, "/api.staff_client.v1.StaffClient/SignOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffClientClient) ReadStaff(ctx context.Context, in *ReadStaffRequest, opts ...grpc.CallOption) (*ReadStaffReply, error) {
	out := new(ReadStaffReply)
	err := c.cc.Invoke(ctx, "/api.staff_client.v1.StaffClient/ReadStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffClientClient) UpdateStaff(ctx context.Context, in *UpdateStaffRequest, opts ...grpc.CallOption) (*UpdateStaffReply, error) {
	out := new(UpdateStaffReply)
	err := c.cc.Invoke(ctx, "/api.staff_client.v1.StaffClient/UpdateStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StaffClientServer is the server API for StaffClient service.
// All implementations must embed UnimplementedStaffClientServer
// for forward compatibility
type StaffClientServer interface {
	// ----------------------------------------------staff登录相关接口-----------------------------------------------------
	Captcha(context.Context, *CaptchaRequest) (*CaptchaReply, error)
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	SignIn(context.Context, *SignInRequest) (*SignInReply, error)
	SignOut(context.Context, *emptypb.Empty) (*SignOutReply, error)
	// ----------------------------------------------staff数据相关接口-----------------------------------------------------
	ReadStaff(context.Context, *ReadStaffRequest) (*ReadStaffReply, error)
	UpdateStaff(context.Context, *UpdateStaffRequest) (*UpdateStaffReply, error)
	mustEmbedUnimplementedStaffClientServer()
}

// UnimplementedStaffClientServer must be embedded to have forward compatible implementations.
type UnimplementedStaffClientServer struct {
}

func (UnimplementedStaffClientServer) Captcha(context.Context, *CaptchaRequest) (*CaptchaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Captcha not implemented")
}
func (UnimplementedStaffClientServer) Register(context.Context, *RegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedStaffClientServer) SignIn(context.Context, *SignInRequest) (*SignInReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedStaffClientServer) SignOut(context.Context, *emptypb.Empty) (*SignOutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignOut not implemented")
}
func (UnimplementedStaffClientServer) ReadStaff(context.Context, *ReadStaffRequest) (*ReadStaffReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadStaff not implemented")
}
func (UnimplementedStaffClientServer) UpdateStaff(context.Context, *UpdateStaffRequest) (*UpdateStaffReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStaff not implemented")
}
func (UnimplementedStaffClientServer) mustEmbedUnimplementedStaffClientServer() {}

// UnsafeStaffClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StaffClientServer will
// result in compilation errors.
type UnsafeStaffClientServer interface {
	mustEmbedUnimplementedStaffClientServer()
}

func RegisterStaffClientServer(s grpc.ServiceRegistrar, srv StaffClientServer) {
	s.RegisterService(&StaffClient_ServiceDesc, srv)
}

func _StaffClient_Captcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptchaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffClientServer).Captcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.staff_client.v1.StaffClient/Captcha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffClientServer).Captcha(ctx, req.(*CaptchaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffClient_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffClientServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.staff_client.v1.StaffClient/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffClientServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffClient_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffClientServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.staff_client.v1.StaffClient/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffClientServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffClient_SignOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffClientServer).SignOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.staff_client.v1.StaffClient/SignOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffClientServer).SignOut(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffClient_ReadStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffClientServer).ReadStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.staff_client.v1.StaffClient/ReadStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffClientServer).ReadStaff(ctx, req.(*ReadStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffClient_UpdateStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffClientServer).UpdateStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.staff_client.v1.StaffClient/UpdateStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffClientServer).UpdateStaff(ctx, req.(*UpdateStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StaffClient_ServiceDesc is the grpc.ServiceDesc for StaffClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StaffClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.staff_client.v1.StaffClient",
	HandlerType: (*StaffClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Captcha",
			Handler:    _StaffClient_Captcha_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _StaffClient_Register_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _StaffClient_SignIn_Handler,
		},
		{
			MethodName: "SignOut",
			Handler:    _StaffClient_SignOut_Handler,
		},
		{
			MethodName: "ReadStaff",
			Handler:    _StaffClient_ReadStaff_Handler,
		},
		{
			MethodName: "UpdateStaff",
			Handler:    _StaffClient_UpdateStaff_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "staff_client/v1/staff.proto",
}
