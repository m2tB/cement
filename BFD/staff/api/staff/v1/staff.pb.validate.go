// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: staff/v1/staff.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateStaffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStaffRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStaffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStaffRequestMultiError, or nil if none found.
func (m *CreateStaffRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStaffRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CreateStaffRequest_Mobile_Pattern.MatchString(m.GetMobile()) {
		err := CreateStaffRequestValidationError{
			field:  "Mobile",
			reason: "value does not match regex pattern \"^0?(13|14|15|17|18|19)[0-9]{9}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 4 {
		err := CreateStaffRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 4 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateStaffRequestMultiError(errors)
	}

	return nil
}

// CreateStaffRequestMultiError is an error wrapping multiple validation errors
// returned by CreateStaffRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateStaffRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStaffRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStaffRequestMultiError) AllErrors() []error { return m }

// CreateStaffRequestValidationError is the validation error returned by
// CreateStaffRequest.Validate if the designated constraints aren't met.
type CreateStaffRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStaffRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStaffRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStaffRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStaffRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStaffRequestValidationError) ErrorName() string {
	return "CreateStaffRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStaffRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStaffRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStaffRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStaffRequestValidationError{}

var _CreateStaffRequest_Mobile_Pattern = regexp.MustCompile("^0?(13|14|15|17|18|19)[0-9]{9}$")

// Validate checks the field values on CreateStaffReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateStaffReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStaffReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStaffReplyMultiError, or nil if none found.
func (m *CreateStaffReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStaffReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exec

	if len(errors) > 0 {
		return CreateStaffReplyMultiError(errors)
	}

	return nil
}

// CreateStaffReplyMultiError is an error wrapping multiple validation errors
// returned by CreateStaffReply.ValidateAll() if the designated constraints
// aren't met.
type CreateStaffReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStaffReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStaffReplyMultiError) AllErrors() []error { return m }

// CreateStaffReplyValidationError is the validation error returned by
// CreateStaffReply.Validate if the designated constraints aren't met.
type CreateStaffReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStaffReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStaffReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStaffReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStaffReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStaffReplyValidationError) ErrorName() string { return "CreateStaffReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateStaffReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStaffReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStaffReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStaffReplyValidationError{}

// Validate checks the field values on UpdateStaffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStaffRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStaffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStaffRequestMultiError, or nil if none found.
func (m *UpdateStaffRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStaffRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateStaffRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMobile() != "" {

		if !_UpdateStaffRequest_Mobile_Pattern.MatchString(m.GetMobile()) {
			err := UpdateStaffRequestValidationError{
				field:  "Mobile",
				reason: "value does not match regex pattern \"^0?(13|14|15|17|18|19)[0-9]{9}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetName() != "" {

		if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 4 {
			err := UpdateStaffRequestValidationError{
				field:  "Name",
				reason: "value length must be between 1 and 4 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateStaffRequestMultiError(errors)
	}

	return nil
}

// UpdateStaffRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateStaffRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateStaffRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStaffRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStaffRequestMultiError) AllErrors() []error { return m }

// UpdateStaffRequestValidationError is the validation error returned by
// UpdateStaffRequest.Validate if the designated constraints aren't met.
type UpdateStaffRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStaffRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStaffRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStaffRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStaffRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStaffRequestValidationError) ErrorName() string {
	return "UpdateStaffRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStaffRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStaffRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStaffRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStaffRequestValidationError{}

var _UpdateStaffRequest_Mobile_Pattern = regexp.MustCompile("^0?(13|14|15|17|18|19)[0-9]{9}$")

// Validate checks the field values on UpdateStaffReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateStaffReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStaffReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStaffReplyMultiError, or nil if none found.
func (m *UpdateStaffReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStaffReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exec

	if len(errors) > 0 {
		return UpdateStaffReplyMultiError(errors)
	}

	return nil
}

// UpdateStaffReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateStaffReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateStaffReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStaffReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStaffReplyMultiError) AllErrors() []error { return m }

// UpdateStaffReplyValidationError is the validation error returned by
// UpdateStaffReply.Validate if the designated constraints aren't met.
type UpdateStaffReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStaffReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStaffReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStaffReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStaffReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStaffReplyValidationError) ErrorName() string { return "UpdateStaffReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateStaffReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStaffReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStaffReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStaffReplyValidationError{}

// Validate checks the field values on DeleteStaffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStaffRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStaffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStaffRequestMultiError, or nil if none found.
func (m *DeleteStaffRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStaffRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteStaffRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteStaffRequestMultiError(errors)
	}

	return nil
}

// DeleteStaffRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteStaffRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteStaffRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStaffRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStaffRequestMultiError) AllErrors() []error { return m }

// DeleteStaffRequestValidationError is the validation error returned by
// DeleteStaffRequest.Validate if the designated constraints aren't met.
type DeleteStaffRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStaffRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStaffRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStaffRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStaffRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStaffRequestValidationError) ErrorName() string {
	return "DeleteStaffRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStaffRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStaffRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStaffRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStaffRequestValidationError{}

// Validate checks the field values on DeleteStaffReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteStaffReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStaffReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStaffReplyMultiError, or nil if none found.
func (m *DeleteStaffReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStaffReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exec

	if len(errors) > 0 {
		return DeleteStaffReplyMultiError(errors)
	}

	return nil
}

// DeleteStaffReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteStaffReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteStaffReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStaffReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStaffReplyMultiError) AllErrors() []error { return m }

// DeleteStaffReplyValidationError is the validation error returned by
// DeleteStaffReply.Validate if the designated constraints aren't met.
type DeleteStaffReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStaffReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStaffReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStaffReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStaffReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStaffReplyValidationError) ErrorName() string { return "DeleteStaffReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteStaffReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStaffReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStaffReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStaffReplyValidationError{}

// Validate checks the field values on ReadStaffRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReadStaffRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadStaffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadStaffRequestMultiError, or nil if none found.
func (m *ReadStaffRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadStaffRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := ReadStaffRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReadStaffRequestMultiError(errors)
	}

	return nil
}

// ReadStaffRequestMultiError is an error wrapping multiple validation errors
// returned by ReadStaffRequest.ValidateAll() if the designated constraints
// aren't met.
type ReadStaffRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadStaffRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadStaffRequestMultiError) AllErrors() []error { return m }

// ReadStaffRequestValidationError is the validation error returned by
// ReadStaffRequest.Validate if the designated constraints aren't met.
type ReadStaffRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadStaffRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadStaffRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadStaffRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadStaffRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadStaffRequestValidationError) ErrorName() string { return "ReadStaffRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReadStaffRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadStaffRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadStaffRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadStaffRequestValidationError{}

// Validate checks the field values on ReadStaffReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReadStaffReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadStaffReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReadStaffReplyMultiError,
// or nil if none found.
func (m *ReadStaffReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadStaffReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStaff()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadStaffReplyValidationError{
					field:  "Staff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadStaffReplyValidationError{
					field:  "Staff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStaff()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadStaffReplyValidationError{
				field:  "Staff",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadStaffReplyMultiError(errors)
	}

	return nil
}

// ReadStaffReplyMultiError is an error wrapping multiple validation errors
// returned by ReadStaffReply.ValidateAll() if the designated constraints
// aren't met.
type ReadStaffReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadStaffReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadStaffReplyMultiError) AllErrors() []error { return m }

// ReadStaffReplyValidationError is the validation error returned by
// ReadStaffReply.Validate if the designated constraints aren't met.
type ReadStaffReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadStaffReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadStaffReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadStaffReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadStaffReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadStaffReplyValidationError) ErrorName() string { return "ReadStaffReplyValidationError" }

// Error satisfies the builtin error interface
func (e ReadStaffReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadStaffReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadStaffReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadStaffReplyValidationError{}

// Validate checks the field values on RecoveryStaffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecoveryStaffRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecoveryStaffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecoveryStaffRequestMultiError, or nil if none found.
func (m *RecoveryStaffRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RecoveryStaffRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := RecoveryStaffRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RecoveryStaffRequestMultiError(errors)
	}

	return nil
}

// RecoveryStaffRequestMultiError is an error wrapping multiple validation
// errors returned by RecoveryStaffRequest.ValidateAll() if the designated
// constraints aren't met.
type RecoveryStaffRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecoveryStaffRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecoveryStaffRequestMultiError) AllErrors() []error { return m }

// RecoveryStaffRequestValidationError is the validation error returned by
// RecoveryStaffRequest.Validate if the designated constraints aren't met.
type RecoveryStaffRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecoveryStaffRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecoveryStaffRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecoveryStaffRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecoveryStaffRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecoveryStaffRequestValidationError) ErrorName() string {
	return "RecoveryStaffRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RecoveryStaffRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecoveryStaffRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecoveryStaffRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecoveryStaffRequestValidationError{}

// Validate checks the field values on RecoveryStaffReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecoveryStaffReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecoveryStaffReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecoveryStaffReplyMultiError, or nil if none found.
func (m *RecoveryStaffReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RecoveryStaffReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exec

	if len(errors) > 0 {
		return RecoveryStaffReplyMultiError(errors)
	}

	return nil
}

// RecoveryStaffReplyMultiError is an error wrapping multiple validation errors
// returned by RecoveryStaffReply.ValidateAll() if the designated constraints
// aren't met.
type RecoveryStaffReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecoveryStaffReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecoveryStaffReplyMultiError) AllErrors() []error { return m }

// RecoveryStaffReplyValidationError is the validation error returned by
// RecoveryStaffReply.Validate if the designated constraints aren't met.
type RecoveryStaffReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecoveryStaffReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecoveryStaffReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecoveryStaffReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecoveryStaffReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecoveryStaffReplyValidationError) ErrorName() string {
	return "RecoveryStaffReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RecoveryStaffReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecoveryStaffReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecoveryStaffReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecoveryStaffReplyValidationError{}

// Validate checks the field values on ListStaffRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListStaffRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStaffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStaffRequestMultiError, or nil if none found.
func (m *ListStaffRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStaffRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPn() != 0 {

		if m.GetPn() < 1 {
			err := ListStaffRequestValidationError{
				field:  "Pn",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPSize() != 0 {

		if m.GetPSize() < 10 {
			err := ListStaffRequestValidationError{
				field:  "PSize",
				reason: "value must be greater than or equal to 10",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetMobile() != "" {

		if !_ListStaffRequest_Mobile_Pattern.MatchString(m.GetMobile()) {
			err := ListStaffRequestValidationError{
				field:  "Mobile",
				reason: "value does not match regex pattern \"^0?(13|14|15|17|18|19)[0-9]{9}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetName() != "" {

		if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 4 {
			err := ListStaffRequestValidationError{
				field:  "Name",
				reason: "value length must be between 1 and 4 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for IsDeleted

	if len(errors) > 0 {
		return ListStaffRequestMultiError(errors)
	}

	return nil
}

// ListStaffRequestMultiError is an error wrapping multiple validation errors
// returned by ListStaffRequest.ValidateAll() if the designated constraints
// aren't met.
type ListStaffRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStaffRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStaffRequestMultiError) AllErrors() []error { return m }

// ListStaffRequestValidationError is the validation error returned by
// ListStaffRequest.Validate if the designated constraints aren't met.
type ListStaffRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStaffRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStaffRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStaffRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStaffRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStaffRequestValidationError) ErrorName() string { return "ListStaffRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListStaffRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStaffRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStaffRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStaffRequestValidationError{}

var _ListStaffRequest_Mobile_Pattern = regexp.MustCompile("^0?(13|14|15|17|18|19)[0-9]{9}$")

// Validate checks the field values on ListStaffReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListStaffReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStaffReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListStaffReplyMultiError,
// or nil if none found.
func (m *ListStaffReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStaffReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListStaffReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListStaffReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStaffReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListStaffReplyMultiError(errors)
	}

	return nil
}

// ListStaffReplyMultiError is an error wrapping multiple validation errors
// returned by ListStaffReply.ValidateAll() if the designated constraints
// aren't met.
type ListStaffReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStaffReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStaffReplyMultiError) AllErrors() []error { return m }

// ListStaffReplyValidationError is the validation error returned by
// ListStaffReply.Validate if the designated constraints aren't met.
type ListStaffReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStaffReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStaffReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStaffReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStaffReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStaffReplyValidationError) ErrorName() string { return "ListStaffReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListStaffReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStaffReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStaffReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStaffReplyValidationError{}

// Validate checks the field values on StaffReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StaffReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StaffReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StaffReplyMultiError, or
// nil if none found.
func (m *StaffReply) ValidateAll() error {
	return m.validate(true)
}

func (m *StaffReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Mobile

	// no validation rules for Name

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return StaffReplyMultiError(errors)
	}

	return nil
}

// StaffReplyMultiError is an error wrapping multiple validation errors
// returned by StaffReply.ValidateAll() if the designated constraints aren't met.
type StaffReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StaffReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StaffReplyMultiError) AllErrors() []error { return m }

// StaffReplyValidationError is the validation error returned by
// StaffReply.Validate if the designated constraints aren't met.
type StaffReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StaffReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StaffReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StaffReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StaffReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StaffReplyValidationError) ErrorName() string { return "StaffReplyValidationError" }

// Error satisfies the builtin error interface
func (e StaffReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStaffReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StaffReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StaffReplyValidationError{}

// Validate checks the field values on CreateTeamRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateTeamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTeamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTeamRequestMultiError, or nil if none found.
func (m *CreateTeamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTeamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCName()); l < 1 || l > 32 {
		err := CreateTeamRequestValidationError{
			field:  "CName",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEName() != "" {

		if l := utf8.RuneCountInString(m.GetEName()); l < 1 || l > 64 {
			err := CreateTeamRequestValidationError{
				field:  "EName",
				reason: "value length must be between 1 and 64 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if l := utf8.RuneCountInString(m.GetPreTeamCode()); l < 1 || l > 4 {
		err := CreateTeamRequestValidationError{
			field:  "PreTeamCode",
			reason: "value length must be between 1 and 4 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateTeamRequestMultiError(errors)
	}

	return nil
}

// CreateTeamRequestMultiError is an error wrapping multiple validation errors
// returned by CreateTeamRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateTeamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTeamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTeamRequestMultiError) AllErrors() []error { return m }

// CreateTeamRequestValidationError is the validation error returned by
// CreateTeamRequest.Validate if the designated constraints aren't met.
type CreateTeamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTeamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTeamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTeamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTeamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTeamRequestValidationError) ErrorName() string {
	return "CreateTeamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTeamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTeamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTeamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTeamRequestValidationError{}

// Validate checks the field values on CreateTeamReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateTeamReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTeamReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTeamReplyMultiError, or nil if none found.
func (m *CreateTeamReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTeamReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exec

	if len(errors) > 0 {
		return CreateTeamReplyMultiError(errors)
	}

	return nil
}

// CreateTeamReplyMultiError is an error wrapping multiple validation errors
// returned by CreateTeamReply.ValidateAll() if the designated constraints
// aren't met.
type CreateTeamReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTeamReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTeamReplyMultiError) AllErrors() []error { return m }

// CreateTeamReplyValidationError is the validation error returned by
// CreateTeamReply.Validate if the designated constraints aren't met.
type CreateTeamReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTeamReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTeamReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTeamReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTeamReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTeamReplyValidationError) ErrorName() string { return "CreateTeamReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateTeamReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTeamReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTeamReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTeamReplyValidationError{}

// Validate checks the field values on UpdateTeamRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateTeamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTeamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTeamRequestMultiError, or nil if none found.
func (m *UpdateTeamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTeamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateTeamRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCName() != "" {

		if l := utf8.RuneCountInString(m.GetCName()); l < 1 || l > 32 {
			err := UpdateTeamRequestValidationError{
				field:  "CName",
				reason: "value length must be between 1 and 32 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetEName() != "" {

		if l := utf8.RuneCountInString(m.GetEName()); l < 1 || l > 64 {
			err := UpdateTeamRequestValidationError{
				field:  "EName",
				reason: "value length must be between 1 and 64 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPreTeamCode() != "" {

		if l := utf8.RuneCountInString(m.GetPreTeamCode()); l < 1 || l > 4 {
			err := UpdateTeamRequestValidationError{
				field:  "PreTeamCode",
				reason: "value length must be between 1 and 4 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateTeamRequestMultiError(errors)
	}

	return nil
}

// UpdateTeamRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateTeamRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateTeamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTeamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTeamRequestMultiError) AllErrors() []error { return m }

// UpdateTeamRequestValidationError is the validation error returned by
// UpdateTeamRequest.Validate if the designated constraints aren't met.
type UpdateTeamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTeamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTeamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTeamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTeamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTeamRequestValidationError) ErrorName() string {
	return "UpdateTeamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTeamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTeamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTeamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTeamRequestValidationError{}

// Validate checks the field values on UpdateTeamReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateTeamReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTeamReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTeamReplyMultiError, or nil if none found.
func (m *UpdateTeamReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTeamReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exec

	if len(errors) > 0 {
		return UpdateTeamReplyMultiError(errors)
	}

	return nil
}

// UpdateTeamReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateTeamReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateTeamReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTeamReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTeamReplyMultiError) AllErrors() []error { return m }

// UpdateTeamReplyValidationError is the validation error returned by
// UpdateTeamReply.Validate if the designated constraints aren't met.
type UpdateTeamReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTeamReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTeamReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTeamReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTeamReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTeamReplyValidationError) ErrorName() string { return "UpdateTeamReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateTeamReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTeamReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTeamReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTeamReplyValidationError{}

// Validate checks the field values on DeleteTeamRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteTeamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTeamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTeamRequestMultiError, or nil if none found.
func (m *DeleteTeamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTeamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteTeamRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteTeamRequestMultiError(errors)
	}

	return nil
}

// DeleteTeamRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteTeamRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteTeamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTeamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTeamRequestMultiError) AllErrors() []error { return m }

// DeleteTeamRequestValidationError is the validation error returned by
// DeleteTeamRequest.Validate if the designated constraints aren't met.
type DeleteTeamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTeamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTeamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTeamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTeamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTeamRequestValidationError) ErrorName() string {
	return "DeleteTeamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTeamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTeamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTeamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTeamRequestValidationError{}

// Validate checks the field values on DeleteTeamReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteTeamReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTeamReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTeamReplyMultiError, or nil if none found.
func (m *DeleteTeamReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTeamReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exec

	if len(errors) > 0 {
		return DeleteTeamReplyMultiError(errors)
	}

	return nil
}

// DeleteTeamReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteTeamReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteTeamReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTeamReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTeamReplyMultiError) AllErrors() []error { return m }

// DeleteTeamReplyValidationError is the validation error returned by
// DeleteTeamReply.Validate if the designated constraints aren't met.
type DeleteTeamReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTeamReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTeamReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTeamReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTeamReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTeamReplyValidationError) ErrorName() string { return "DeleteTeamReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteTeamReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTeamReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTeamReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTeamReplyValidationError{}

// Validate checks the field values on ReadTeamRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReadTeamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadTeamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadTeamRequestMultiError, or nil if none found.
func (m *ReadTeamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadTeamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := ReadTeamRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReadTeamRequestMultiError(errors)
	}

	return nil
}

// ReadTeamRequestMultiError is an error wrapping multiple validation errors
// returned by ReadTeamRequest.ValidateAll() if the designated constraints
// aren't met.
type ReadTeamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadTeamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadTeamRequestMultiError) AllErrors() []error { return m }

// ReadTeamRequestValidationError is the validation error returned by
// ReadTeamRequest.Validate if the designated constraints aren't met.
type ReadTeamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadTeamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadTeamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadTeamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadTeamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadTeamRequestValidationError) ErrorName() string { return "ReadTeamRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReadTeamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadTeamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadTeamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadTeamRequestValidationError{}

// Validate checks the field values on ReadTeamReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReadTeamReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadTeamReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReadTeamReplyMultiError, or
// nil if none found.
func (m *ReadTeamReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadTeamReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTeam()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadTeamReplyValidationError{
					field:  "Team",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadTeamReplyValidationError{
					field:  "Team",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTeam()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadTeamReplyValidationError{
				field:  "Team",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadTeamReplyMultiError(errors)
	}

	return nil
}

// ReadTeamReplyMultiError is an error wrapping multiple validation errors
// returned by ReadTeamReply.ValidateAll() if the designated constraints
// aren't met.
type ReadTeamReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadTeamReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadTeamReplyMultiError) AllErrors() []error { return m }

// ReadTeamReplyValidationError is the validation error returned by
// ReadTeamReply.Validate if the designated constraints aren't met.
type ReadTeamReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadTeamReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadTeamReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadTeamReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadTeamReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadTeamReplyValidationError) ErrorName() string { return "ReadTeamReplyValidationError" }

// Error satisfies the builtin error interface
func (e ReadTeamReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadTeamReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadTeamReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadTeamReplyValidationError{}

// Validate checks the field values on ListTeamRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTeamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTeamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTeamRequestMultiError, or nil if none found.
func (m *ListTeamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTeamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPn() != 0 {

		if m.GetPn() < 1 {
			err := ListTeamRequestValidationError{
				field:  "Pn",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPSize() != 0 {

		if m.GetPSize() < 10 {
			err := ListTeamRequestValidationError{
				field:  "PSize",
				reason: "value must be greater than or equal to 10",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetCName() != "" {

		if l := utf8.RuneCountInString(m.GetCName()); l < 1 || l > 32 {
			err := ListTeamRequestValidationError{
				field:  "CName",
				reason: "value length must be between 1 and 32 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetEName() != "" {

		if l := utf8.RuneCountInString(m.GetEName()); l < 1 || l > 64 {
			err := ListTeamRequestValidationError{
				field:  "EName",
				reason: "value length must be between 1 and 64 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPreTeamCode() != "" {

		if l := utf8.RuneCountInString(m.GetPreTeamCode()); l < 1 || l > 4 {
			err := ListTeamRequestValidationError{
				field:  "PreTeamCode",
				reason: "value length must be between 1 and 4 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListTeamRequestMultiError(errors)
	}

	return nil
}

// ListTeamRequestMultiError is an error wrapping multiple validation errors
// returned by ListTeamRequest.ValidateAll() if the designated constraints
// aren't met.
type ListTeamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTeamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTeamRequestMultiError) AllErrors() []error { return m }

// ListTeamRequestValidationError is the validation error returned by
// ListTeamRequest.Validate if the designated constraints aren't met.
type ListTeamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTeamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTeamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTeamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTeamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTeamRequestValidationError) ErrorName() string { return "ListTeamRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListTeamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTeamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTeamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTeamRequestValidationError{}

// Validate checks the field values on ListTeamReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListTeamReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTeamReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListTeamReplyMultiError, or
// nil if none found.
func (m *ListTeamReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTeamReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTeamReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTeamReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTeamReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTeamReplyMultiError(errors)
	}

	return nil
}

// ListTeamReplyMultiError is an error wrapping multiple validation errors
// returned by ListTeamReply.ValidateAll() if the designated constraints
// aren't met.
type ListTeamReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTeamReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTeamReplyMultiError) AllErrors() []error { return m }

// ListTeamReplyValidationError is the validation error returned by
// ListTeamReply.Validate if the designated constraints aren't met.
type ListTeamReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTeamReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTeamReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTeamReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTeamReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTeamReplyValidationError) ErrorName() string { return "ListTeamReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListTeamReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTeamReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTeamReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTeamReplyValidationError{}

// Validate checks the field values on TeamReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TeamReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TeamReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TeamReplyMultiError, or nil
// if none found.
func (m *TeamReply) ValidateAll() error {
	return m.validate(true)
}

func (m *TeamReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CName

	// no validation rules for EName

	// no validation rules for PreTeamCode

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return TeamReplyMultiError(errors)
	}

	return nil
}

// TeamReplyMultiError is an error wrapping multiple validation errors returned
// by TeamReply.ValidateAll() if the designated constraints aren't met.
type TeamReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TeamReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TeamReplyMultiError) AllErrors() []error { return m }

// TeamReplyValidationError is the validation error returned by
// TeamReply.Validate if the designated constraints aren't met.
type TeamReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TeamReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TeamReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TeamReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TeamReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TeamReplyValidationError) ErrorName() string { return "TeamReplyValidationError" }

// Error satisfies the builtin error interface
func (e TeamReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTeamReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TeamReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TeamReplyValidationError{}

// Validate checks the field values on InviteStaffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InviteStaffRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InviteStaffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InviteStaffRequestMultiError, or nil if none found.
func (m *InviteStaffRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InviteStaffRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTid() <= 0 {
		err := InviteStaffRequestValidationError{
			field:  "Tid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return InviteStaffRequestMultiError(errors)
	}

	return nil
}

// InviteStaffRequestMultiError is an error wrapping multiple validation errors
// returned by InviteStaffRequest.ValidateAll() if the designated constraints
// aren't met.
type InviteStaffRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteStaffRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteStaffRequestMultiError) AllErrors() []error { return m }

// InviteStaffRequestValidationError is the validation error returned by
// InviteStaffRequest.Validate if the designated constraints aren't met.
type InviteStaffRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteStaffRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteStaffRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteStaffRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteStaffRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteStaffRequestValidationError) ErrorName() string {
	return "InviteStaffRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InviteStaffRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteStaffRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteStaffRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteStaffRequestValidationError{}

// Validate checks the field values on InviteStaffReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InviteStaffReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InviteStaffReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InviteStaffReplyMultiError, or nil if none found.
func (m *InviteStaffReply) ValidateAll() error {
	return m.validate(true)
}

func (m *InviteStaffReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exec

	if len(errors) > 0 {
		return InviteStaffReplyMultiError(errors)
	}

	return nil
}

// InviteStaffReplyMultiError is an error wrapping multiple validation errors
// returned by InviteStaffReply.ValidateAll() if the designated constraints
// aren't met.
type InviteStaffReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteStaffReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteStaffReplyMultiError) AllErrors() []error { return m }

// InviteStaffReplyValidationError is the validation error returned by
// InviteStaffReply.Validate if the designated constraints aren't met.
type InviteStaffReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteStaffReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteStaffReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteStaffReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteStaffReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteStaffReplyValidationError) ErrorName() string { return "InviteStaffReplyValidationError" }

// Error satisfies the builtin error interface
func (e InviteStaffReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteStaffReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteStaffReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteStaffReplyValidationError{}

// Validate checks the field values on ExpelStaffRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExpelStaffRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExpelStaffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExpelStaffRequestMultiError, or nil if none found.
func (m *ExpelStaffRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExpelStaffRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTid() <= 0 {
		err := ExpelStaffRequestValidationError{
			field:  "Tid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSid() <= 0 {
		err := ExpelStaffRequestValidationError{
			field:  "Sid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExpelStaffRequestMultiError(errors)
	}

	return nil
}

// ExpelStaffRequestMultiError is an error wrapping multiple validation errors
// returned by ExpelStaffRequest.ValidateAll() if the designated constraints
// aren't met.
type ExpelStaffRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpelStaffRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpelStaffRequestMultiError) AllErrors() []error { return m }

// ExpelStaffRequestValidationError is the validation error returned by
// ExpelStaffRequest.Validate if the designated constraints aren't met.
type ExpelStaffRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpelStaffRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpelStaffRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpelStaffRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpelStaffRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpelStaffRequestValidationError) ErrorName() string {
	return "ExpelStaffRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExpelStaffRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpelStaffRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpelStaffRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpelStaffRequestValidationError{}

// Validate checks the field values on ExpelStaffReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExpelStaffReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExpelStaffReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExpelStaffReplyMultiError, or nil if none found.
func (m *ExpelStaffReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ExpelStaffReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exec

	if len(errors) > 0 {
		return ExpelStaffReplyMultiError(errors)
	}

	return nil
}

// ExpelStaffReplyMultiError is an error wrapping multiple validation errors
// returned by ExpelStaffReply.ValidateAll() if the designated constraints
// aren't met.
type ExpelStaffReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpelStaffReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpelStaffReplyMultiError) AllErrors() []error { return m }

// ExpelStaffReplyValidationError is the validation error returned by
// ExpelStaffReply.Validate if the designated constraints aren't met.
type ExpelStaffReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpelStaffReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpelStaffReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpelStaffReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpelStaffReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpelStaffReplyValidationError) ErrorName() string { return "ExpelStaffReplyValidationError" }

// Error satisfies the builtin error interface
func (e ExpelStaffReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpelStaffReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpelStaffReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpelStaffReplyValidationError{}

// Validate checks the field values on ListTeamStaffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTeamStaffRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTeamStaffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTeamStaffRequestMultiError, or nil if none found.
func (m *ListTeamStaffRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTeamStaffRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPn() != 0 {

		if m.GetPn() < 1 {
			err := ListTeamStaffRequestValidationError{
				field:  "Pn",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPSize() != 0 {

		if m.GetPSize() < 10 {
			err := ListTeamStaffRequestValidationError{
				field:  "PSize",
				reason: "value must be greater than or equal to 10",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetTid() <= 0 {
		err := ListTeamStaffRequestValidationError{
			field:  "Tid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListTeamStaffRequestMultiError(errors)
	}

	return nil
}

// ListTeamStaffRequestMultiError is an error wrapping multiple validation
// errors returned by ListTeamStaffRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTeamStaffRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTeamStaffRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTeamStaffRequestMultiError) AllErrors() []error { return m }

// ListTeamStaffRequestValidationError is the validation error returned by
// ListTeamStaffRequest.Validate if the designated constraints aren't met.
type ListTeamStaffRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTeamStaffRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTeamStaffRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTeamStaffRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTeamStaffRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTeamStaffRequestValidationError) ErrorName() string {
	return "ListTeamStaffRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTeamStaffRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTeamStaffRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTeamStaffRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTeamStaffRequestValidationError{}

// Validate checks the field values on ListTeamStaffReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTeamStaffReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTeamStaffReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTeamStaffReplyMultiError, or nil if none found.
func (m *ListTeamStaffReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTeamStaffReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTeamStaffReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTeamStaffReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTeamStaffReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTeamStaffReplyMultiError(errors)
	}

	return nil
}

// ListTeamStaffReplyMultiError is an error wrapping multiple validation errors
// returned by ListTeamStaffReply.ValidateAll() if the designated constraints
// aren't met.
type ListTeamStaffReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTeamStaffReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTeamStaffReplyMultiError) AllErrors() []error { return m }

// ListTeamStaffReplyValidationError is the validation error returned by
// ListTeamStaffReply.Validate if the designated constraints aren't met.
type ListTeamStaffReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTeamStaffReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTeamStaffReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTeamStaffReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTeamStaffReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTeamStaffReplyValidationError) ErrorName() string {
	return "ListTeamStaffReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListTeamStaffReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTeamStaffReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTeamStaffReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTeamStaffReplyValidationError{}

// Validate checks the field values on TeamStaffReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TeamStaffReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TeamStaffReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TeamStaffReplyMultiError,
// or nil if none found.
func (m *TeamStaffReply) ValidateAll() error {
	return m.validate(true)
}

func (m *TeamStaffReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sid

	// no validation rules for SName

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return TeamStaffReplyMultiError(errors)
	}

	return nil
}

// TeamStaffReplyMultiError is an error wrapping multiple validation errors
// returned by TeamStaffReply.ValidateAll() if the designated constraints
// aren't met.
type TeamStaffReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TeamStaffReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TeamStaffReplyMultiError) AllErrors() []error { return m }

// TeamStaffReplyValidationError is the validation error returned by
// TeamStaffReply.Validate if the designated constraints aren't met.
type TeamStaffReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TeamStaffReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TeamStaffReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TeamStaffReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TeamStaffReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TeamStaffReplyValidationError) ErrorName() string { return "TeamStaffReplyValidationError" }

// Error satisfies the builtin error interface
func (e TeamStaffReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTeamStaffReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TeamStaffReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TeamStaffReplyValidationError{}

// Validate checks the field values on ListStaffTeamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStaffTeamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStaffTeamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStaffTeamRequestMultiError, or nil if none found.
func (m *ListStaffTeamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStaffTeamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPn() != 0 {

		if m.GetPn() < 1 {
			err := ListStaffTeamRequestValidationError{
				field:  "Pn",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPSize() != 0 {

		if m.GetPSize() < 10 {
			err := ListStaffTeamRequestValidationError{
				field:  "PSize",
				reason: "value must be greater than or equal to 10",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetSid() <= 0 {
		err := ListStaffTeamRequestValidationError{
			field:  "Sid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListStaffTeamRequestMultiError(errors)
	}

	return nil
}

// ListStaffTeamRequestMultiError is an error wrapping multiple validation
// errors returned by ListStaffTeamRequest.ValidateAll() if the designated
// constraints aren't met.
type ListStaffTeamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStaffTeamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStaffTeamRequestMultiError) AllErrors() []error { return m }

// ListStaffTeamRequestValidationError is the validation error returned by
// ListStaffTeamRequest.Validate if the designated constraints aren't met.
type ListStaffTeamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStaffTeamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStaffTeamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStaffTeamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStaffTeamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStaffTeamRequestValidationError) ErrorName() string {
	return "ListStaffTeamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListStaffTeamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStaffTeamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStaffTeamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStaffTeamRequestValidationError{}

// Validate checks the field values on ListStaffTeamReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStaffTeamReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStaffTeamReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStaffTeamReplyMultiError, or nil if none found.
func (m *ListStaffTeamReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStaffTeamReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListStaffTeamReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListStaffTeamReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStaffTeamReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListStaffTeamReplyMultiError(errors)
	}

	return nil
}

// ListStaffTeamReplyMultiError is an error wrapping multiple validation errors
// returned by ListStaffTeamReply.ValidateAll() if the designated constraints
// aren't met.
type ListStaffTeamReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStaffTeamReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStaffTeamReplyMultiError) AllErrors() []error { return m }

// ListStaffTeamReplyValidationError is the validation error returned by
// ListStaffTeamReply.Validate if the designated constraints aren't met.
type ListStaffTeamReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStaffTeamReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStaffTeamReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStaffTeamReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStaffTeamReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStaffTeamReplyValidationError) ErrorName() string {
	return "ListStaffTeamReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListStaffTeamReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStaffTeamReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStaffTeamReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStaffTeamReplyValidationError{}

// Validate checks the field values on StaffTeamReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StaffTeamReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StaffTeamReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StaffTeamReplyMultiError,
// or nil if none found.
func (m *StaffTeamReply) ValidateAll() error {
	return m.validate(true)
}

func (m *StaffTeamReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Tid

	// no validation rules for TName

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return StaffTeamReplyMultiError(errors)
	}

	return nil
}

// StaffTeamReplyMultiError is an error wrapping multiple validation errors
// returned by StaffTeamReply.ValidateAll() if the designated constraints
// aren't met.
type StaffTeamReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StaffTeamReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StaffTeamReplyMultiError) AllErrors() []error { return m }

// StaffTeamReplyValidationError is the validation error returned by
// StaffTeamReply.Validate if the designated constraints aren't met.
type StaffTeamReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StaffTeamReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StaffTeamReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StaffTeamReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StaffTeamReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StaffTeamReplyValidationError) ErrorName() string { return "StaffTeamReplyValidationError" }

// Error satisfies the builtin error interface
func (e StaffTeamReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStaffTeamReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StaffTeamReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StaffTeamReplyValidationError{}

// Validate checks the field values on CreateSubTeamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSubTeamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSubTeamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSubTeamRequestMultiError, or nil if none found.
func (m *CreateSubTeamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSubTeamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPid() <= 0 {
		err := CreateSubTeamRequestValidationError{
			field:  "Pid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTid() <= 0 {
		err := CreateSubTeamRequestValidationError{
			field:  "Tid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateSubTeamRequestMultiError(errors)
	}

	return nil
}

// CreateSubTeamRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSubTeamRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSubTeamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSubTeamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSubTeamRequestMultiError) AllErrors() []error { return m }

// CreateSubTeamRequestValidationError is the validation error returned by
// CreateSubTeamRequest.Validate if the designated constraints aren't met.
type CreateSubTeamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubTeamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubTeamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubTeamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubTeamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubTeamRequestValidationError) ErrorName() string {
	return "CreateSubTeamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubTeamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubTeamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubTeamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubTeamRequestValidationError{}

// Validate checks the field values on CreateSubTeamReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSubTeamReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSubTeamReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSubTeamReplyMultiError, or nil if none found.
func (m *CreateSubTeamReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSubTeamReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exec

	if len(errors) > 0 {
		return CreateSubTeamReplyMultiError(errors)
	}

	return nil
}

// CreateSubTeamReplyMultiError is an error wrapping multiple validation errors
// returned by CreateSubTeamReply.ValidateAll() if the designated constraints
// aren't met.
type CreateSubTeamReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSubTeamReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSubTeamReplyMultiError) AllErrors() []error { return m }

// CreateSubTeamReplyValidationError is the validation error returned by
// CreateSubTeamReply.Validate if the designated constraints aren't met.
type CreateSubTeamReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubTeamReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubTeamReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubTeamReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubTeamReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubTeamReplyValidationError) ErrorName() string {
	return "CreateSubTeamReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubTeamReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubTeamReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubTeamReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubTeamReplyValidationError{}

// Validate checks the field values on UpdateSubTeamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSubTeamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSubTeamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSubTeamRequestMultiError, or nil if none found.
func (m *UpdateSubTeamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSubTeamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPid() <= 0 {
		err := UpdateSubTeamRequestValidationError{
			field:  "Pid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOPid() <= 0 {
		err := UpdateSubTeamRequestValidationError{
			field:  "OPid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTid() <= 0 {
		err := UpdateSubTeamRequestValidationError{
			field:  "Tid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateSubTeamRequestMultiError(errors)
	}

	return nil
}

// UpdateSubTeamRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateSubTeamRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateSubTeamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSubTeamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSubTeamRequestMultiError) AllErrors() []error { return m }

// UpdateSubTeamRequestValidationError is the validation error returned by
// UpdateSubTeamRequest.Validate if the designated constraints aren't met.
type UpdateSubTeamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSubTeamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSubTeamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSubTeamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSubTeamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSubTeamRequestValidationError) ErrorName() string {
	return "UpdateSubTeamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSubTeamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSubTeamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSubTeamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSubTeamRequestValidationError{}

// Validate checks the field values on UpdateSubTeamReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSubTeamReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSubTeamReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSubTeamReplyMultiError, or nil if none found.
func (m *UpdateSubTeamReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSubTeamReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exec

	if len(errors) > 0 {
		return UpdateSubTeamReplyMultiError(errors)
	}

	return nil
}

// UpdateSubTeamReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateSubTeamReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateSubTeamReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSubTeamReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSubTeamReplyMultiError) AllErrors() []error { return m }

// UpdateSubTeamReplyValidationError is the validation error returned by
// UpdateSubTeamReply.Validate if the designated constraints aren't met.
type UpdateSubTeamReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSubTeamReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSubTeamReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSubTeamReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSubTeamReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSubTeamReplyValidationError) ErrorName() string {
	return "UpdateSubTeamReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSubTeamReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSubTeamReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSubTeamReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSubTeamReplyValidationError{}

// Validate checks the field values on DeleteSubTeamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSubTeamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSubTeamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSubTeamRequestMultiError, or nil if none found.
func (m *DeleteSubTeamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSubTeamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTid() <= 0 {
		err := DeleteSubTeamRequestValidationError{
			field:  "Tid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteSubTeamRequestMultiError(errors)
	}

	return nil
}

// DeleteSubTeamRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSubTeamRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteSubTeamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSubTeamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSubTeamRequestMultiError) AllErrors() []error { return m }

// DeleteSubTeamRequestValidationError is the validation error returned by
// DeleteSubTeamRequest.Validate if the designated constraints aren't met.
type DeleteSubTeamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSubTeamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSubTeamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSubTeamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSubTeamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSubTeamRequestValidationError) ErrorName() string {
	return "DeleteSubTeamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSubTeamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSubTeamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSubTeamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSubTeamRequestValidationError{}

// Validate checks the field values on DeleteSubTeamReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSubTeamReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSubTeamReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSubTeamReplyMultiError, or nil if none found.
func (m *DeleteSubTeamReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSubTeamReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exec

	if len(errors) > 0 {
		return DeleteSubTeamReplyMultiError(errors)
	}

	return nil
}

// DeleteSubTeamReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteSubTeamReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteSubTeamReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSubTeamReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSubTeamReplyMultiError) AllErrors() []error { return m }

// DeleteSubTeamReplyValidationError is the validation error returned by
// DeleteSubTeamReply.Validate if the designated constraints aren't met.
type DeleteSubTeamReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSubTeamReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSubTeamReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSubTeamReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSubTeamReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSubTeamReplyValidationError) ErrorName() string {
	return "DeleteSubTeamReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSubTeamReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSubTeamReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSubTeamReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSubTeamReplyValidationError{}

// Validate checks the field values on ListTeamSubTeamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTeamSubTeamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTeamSubTeamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTeamSubTeamRequestMultiError, or nil if none found.
func (m *ListTeamSubTeamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTeamSubTeamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPn() != 0 {

		if m.GetPn() < 1 {
			err := ListTeamSubTeamRequestValidationError{
				field:  "Pn",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPSize() != 0 {

		if m.GetPSize() < 10 {
			err := ListTeamSubTeamRequestValidationError{
				field:  "PSize",
				reason: "value must be greater than or equal to 10",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPid() <= 0 {
		err := ListTeamSubTeamRequestValidationError{
			field:  "Pid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListTeamSubTeamRequestMultiError(errors)
	}

	return nil
}

// ListTeamSubTeamRequestMultiError is an error wrapping multiple validation
// errors returned by ListTeamSubTeamRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTeamSubTeamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTeamSubTeamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTeamSubTeamRequestMultiError) AllErrors() []error { return m }

// ListTeamSubTeamRequestValidationError is the validation error returned by
// ListTeamSubTeamRequest.Validate if the designated constraints aren't met.
type ListTeamSubTeamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTeamSubTeamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTeamSubTeamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTeamSubTeamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTeamSubTeamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTeamSubTeamRequestValidationError) ErrorName() string {
	return "ListTeamSubTeamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTeamSubTeamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTeamSubTeamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTeamSubTeamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTeamSubTeamRequestValidationError{}

// Validate checks the field values on ListTeamSubTeamReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTeamSubTeamReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTeamSubTeamReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTeamSubTeamReplyMultiError, or nil if none found.
func (m *ListTeamSubTeamReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTeamSubTeamReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTeamSubTeamReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTeamSubTeamReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTeamSubTeamReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTeamSubTeamReplyMultiError(errors)
	}

	return nil
}

// ListTeamSubTeamReplyMultiError is an error wrapping multiple validation
// errors returned by ListTeamSubTeamReply.ValidateAll() if the designated
// constraints aren't met.
type ListTeamSubTeamReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTeamSubTeamReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTeamSubTeamReplyMultiError) AllErrors() []error { return m }

// ListTeamSubTeamReplyValidationError is the validation error returned by
// ListTeamSubTeamReply.Validate if the designated constraints aren't met.
type ListTeamSubTeamReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTeamSubTeamReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTeamSubTeamReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTeamSubTeamReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTeamSubTeamReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTeamSubTeamReplyValidationError) ErrorName() string {
	return "ListTeamSubTeamReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListTeamSubTeamReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTeamSubTeamReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTeamSubTeamReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTeamSubTeamReplyValidationError{}

// Validate checks the field values on TeamSubTeamReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TeamSubTeamReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TeamSubTeamReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TeamSubTeamReplyMultiError, or nil if none found.
func (m *TeamSubTeamReply) ValidateAll() error {
	return m.validate(true)
}

func (m *TeamSubTeamReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Tid

	// no validation rules for TName

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return TeamSubTeamReplyMultiError(errors)
	}

	return nil
}

// TeamSubTeamReplyMultiError is an error wrapping multiple validation errors
// returned by TeamSubTeamReply.ValidateAll() if the designated constraints
// aren't met.
type TeamSubTeamReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TeamSubTeamReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TeamSubTeamReplyMultiError) AllErrors() []error { return m }

// TeamSubTeamReplyValidationError is the validation error returned by
// TeamSubTeamReply.Validate if the designated constraints aren't met.
type TeamSubTeamReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TeamSubTeamReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TeamSubTeamReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TeamSubTeamReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TeamSubTeamReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TeamSubTeamReplyValidationError) ErrorName() string { return "TeamSubTeamReplyValidationError" }

// Error satisfies the builtin error interface
func (e TeamSubTeamReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTeamSubTeamReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TeamSubTeamReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TeamSubTeamReplyValidationError{}
